group llvm;

return(a) ::= "<a>"

returnTwo(a, b) ::= <<
<a>
<b>

>>

declare(var, expr, tmpNum) ::= <<
;evaluating expression
<expr>
;storing expression into variable
%.<var> = alloca i32, align 4
store i32 %.<tmpNum>, i32* %.<var>
>>

llvmProgram(globalStatements) ::= <<
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

<globalStatements>

declare i32 @printf(i8*, ...)

declare i32 @power_i32(i32, i32)

declare float @power_float(float, float)

declare i32 @print_i32(i32)

declare float @print_float(float)

declare i1 @print_i1(i1)

declare i8 @print_i8(i8)

declare i32 @print_i32_vector(i32*, i32)

declare float @print_float_vector(float*, i32)

declare i1 @print_i1_vector(i1*, i32)

declare i8 @print_i8_vector(i8*, i32)

declare i32 @print_i32_interval(i32, i32)

declare i32 @input_i32(i32*)

declare float @input_float(float*)

declare i1 @input_i1(i1*)

declare i8 @input_i8(i8*)

declare i32 @stream_state()

declare i32 @add_i32_vectors(i32*, i32, i32*, i32, i32*)

declare i32 @sub_i32_vectors(i32*, i32, i32*, i32, i32*)

declare i32 @mul_i32_vectors(i32*, i32, i32*, i32, i32*)

declare i32 @div_i32_vectors(i32*, i32, i32*, i32, i32*)

declare i32 @mod_i32_vectors(i32*, i32, i32*, i32, i32*)

declare i32 @pow_i32_vectors(i32*, i32, i32*, i32, i32*)

declare i32 @neg_i32_vectors(i32*, i32, i32*)

declare i32 @less_i32_vectors(i32*, i32, i32*, i32, i1*)

declare i32 @greater_i32_vectors(i32*, i32, i32*, i32, i1*)

declare i32 @lessequal_i32_vectors(i32*, i32, i32*, i32, i1*)

declare i32 @greaterequal_i32_vectors(i32*, i32, i32*, i32, i1*)

declare i1 @equal_i32_vectors(i32*, i32, i32*, i32)

declare i1 @nequal_i32_vectors(i32*, i32, i32*, i32)

declare i32 @dot_i32_vectors(i32*, i32, i32*, i32)

declare i32 @cat_i32_vectors(i32*, i32, i32*, i32, i32*)

declare float @add_float_vectors(float*, i32, float*, i32, float*)

declare float @sub_float_vectors(float*, i32, float*, i32, float*)

declare float @mul_float_vectors(float*, i32, float*, i32, float*)

declare float @div_float_vectors(float*, i32, float*, i32, float*)

declare float @mod_float_vectors(float*, i32, float*, i32, float*)

declare float @pow_float_vectors(float*, i32, float*, i32, float*)

declare float @neg_float_vectors(float*, i32, float*)

declare float @less_float_vectors(float*, i32, float*, i32, i1*)

declare float @greater_float_vectors(float*, i32, float*, i32, i1*)

declare float @lessequal_float_vectors(float*, i32, float*, i32, i1*)

declare float @greaterequal_float_vectors(float*, i32, float*, i32, i1*)

declare i1 @equal_float_vectors(float*, i32, float*, i32)

declare i1 @nequal_float_vectors(float*, i32, float*, i32)

declare float @dot_float_vectors(float*, i32, float*, i32)

declare float @cat_float_vectors(float*, i32, float*, i32, float*)

declare i8 @less_i8_vectors(i8*, i32, i8*, i32, i1*)

declare i8 @greater_i8_vectors(i8*, i32, i8*, i32, i1*)

declare i8 @lessequal_i8_vectors(i8*, i32, i8*, i32, i1*)

declare i8 @greaterequal_i8_vectors(i8*, i32, i8*, i32, i1*)

declare i1 @equal_i8_vectors(i8*, i32, i8*, i32)

declare i1 @nequal_i8_vectors(i8*, i32, i8*, i32)

declare i8 @cat_i8_vectors(i8*, i32, i8*, i32, i8*)

declare i1 @not_i1_vectors(i1*, i32, i1*)

declare i1 @or_i1_vectors(i1*, i32, i1*, i32, i1*)

declare i1 @xor_i1_vectors(i1*, i32, i1*, i32, i1*)

declare i1 @and_i1_vectors(i1*, i32, i1*, i32, i1*)

declare i1 @equal_i1_vectors(i1*, i32, i1*, i32)

declare i1 @nequal_i1_vectors(i1*, i32, i1*, i32)

declare i1 @cat_i1_vectors(i1*, i32, i1*, i32, i1*)

>>

globalDeclare(varName, varType, varValue, alignment) ::= <<
  @.<varName> = global <varType> <varValue>, align <alignment>
>>

declareProcOrFunc(procName, procVars, procBody, retType, retNum) ::= <<
define <retType> @<procName>(<procVars>) {
entry:
  <procBody>
}


>>

declareVoidProc(procName, procVars, procType, procBody) ::= <<
define void @<procName>(<procVars>) {
entry:
  <procBody>
  ret void
}


>>

paramsep(params) ::= << <params:{ a |<a>}; separator=", "> >>

param(name, type, scopeNum) ::= << <type> %.<name>.<scopeNum>
>>


outputDecl(sym, varName, scopeNum, varType, expr, tmpNum) ::= <<
;start outputDecl
<expr>

<sym>.<varName>.<scopeNum> = alloca <varType>, align 4
store <varType> %.<tmpNum>, <varType>* <sym>.<varName>.<scopeNum>
;end outputDecl

>>

outputVecDecl(sym, varName, scopeNum, scalarType, expr, tmpNum) ::= <<
;start outputDecl
<expr>

<sym>.<varName>.<scopeNum> = alloca {i32, <scalarType>*}, align 4
store {i32, <scalarType>*} %.<tmpNum>, {i32, <scalarType>*}* <sym>.<varName>.<scopeNum>
;end empty vec decl

>>

outputEmptyDecl(sym, varName, scopeNum, varType, value) ::= <<
;start outputEmptyDecl
<sym>.<varName>.<scopeNum> = alloca <varType>, align 4
store <varType> <value>, <varType>* <sym>.<varName>.<scopeNum>
;end outputEmptyDecl

>>

outputEmptyVecDecl(sym, varName, scopeNum, scalarType, value, sizeName, exprs) ::= <<
;start empty vec decl
<exprs>

<sym>.<varName>.<scopeNum> = alloca {i32, <scalarType>*}, align 4
%.tempstruct<sizeName>.<varName>.<scopeNum> = insertvalue {i32, <scalarType>*} undef, i32 %.<sizeName>, 0
; TODO: Need to initialize all vector elements to null
store {i32, <scalarType>*} %.tempstruct<sizeName>.<varName>.<scopeNum>, {i32, <scalarType>*}* <sym>.<varName>.<scopeNum>
;end empty vec decl

>>

outputAssi(sym, varName, varType, scopeNum, expr, tmpNum) ::= <<
;start outputAssi
<expr>

store <varType> %.<tmpNum>, <varType>* <sym>.<varName>.<scopeNum>
;end outputAssi

>>

load_num(tmpNum, value, varType) ::= <<
;start load_num
%.temp<tmpNum> = alloca <varType>, align 4
store <varType> <value>, <varType>* %.temp<tmpNum>
%.<tmpNum> = load <varType>* %.temp<tmpNum>
;end load_num

>>

load_var(tmpNum, sym, var, scopeNum, varType) ::= <<
;start load_var
%.<tmpNum> = load <varType>* <sym>.<var>.<scopeNum>
;end load_var

>>

load_const(tmpNum, sym, var, scopeNum, varType) ::= <<
;start load const
%.const<tmpNum> = alloca <varType>, align 4
store <varType> <sym>.<var>.<scopeNum>, <varType>* %.const<tmpNum>
%.<tmpNum> = load <varType>* %.const<tmpNum>
;end load_const

>>

load_bool(tmpNum, value, varType) ::= <<
;start load_bool
%.bool<tmpNum> = alloca <varType>, align 1
store <varType> <value>, <varType>* %.bool<tmpNum>
%.<tmpNum> = load <varType>* %.bool<tmpNum>
;end load_bool

>>

load_char(tmpNum, value, varType) ::= <<
;start load_char
%.char<tmpNum> = alloca <varType>, align 1
store <varType> <value>, <varType>* %.char<tmpNum>
%.<tmpNum> = load <varType>* %.char<tmpNum>
;end load_char

>>

load_vector(tmpNum, exprs, varNames, varType, size, varIndices) ::= <<
;load vector
<exprs>
%.constvector1.<tmpNum> = insertvalue {i32, <varType>*} undef, i32 <size>, 0

%.vector<tmpNum> = alloca <varType>, i32 <size>, align 4
<varNames, varIndices:
{ name, index |
%.tmp.<name> = getelementptr inbounds <varType>* %.vector<tmpNum>, i32 <index>
store <varType> %.<name>, <varType>* %.tmp.<name>
}>

%.<tmpNum> = insertvalue {i32, <varType>*} %.constvector1.<tmpNum>, <varType>* %.vector<tmpNum>, 1
;store {i32, <varType>*} %.constvector2, {i32, <varType>*}* %.<tmpNum>
;end load vector

>>

load_interval(tmpNum1, tmpNum2, expr1, expr2, result, scalarType) ::= <<
;start load interval
<expr1>
<expr2>

%.intervaltemp.<result> = insertvalue {<scalarType>, <scalarType>} undef, <scalarType> %.<tmpNum1>, 0
%.<result> = insertvalue {<scalarType>, <scalarType>} %.intervaltemp.<result>, <scalarType> %.<tmpNum2>, 1
;end load interval

>>

print(expr, type, result) ::= <<
;start print
<expr>
call <type> (<type>)* @print_<type>(<type> %.<result>)
;end print

>>

print_vector(expr, size, scalarType, result) ::= <<
;start print vector
<expr>


%.size<result> = extractvalue {i32, <scalarType>*} %.<result>, 0
%.vectortemp<result> = extractvalue {i32, <scalarType>*} %.<result>, 1

call <scalarType> (<scalarType>*, i32)* @print_<scalarType>_vector(<scalarType>* %.vectortemp<result>, i32 %.size<result>)
;end print vector

>>

print_interval(expr, scalarType, result) ::= <<
;start print interval
<expr>

%.lower.<result> = extractvalue {<scalarType>, <scalarType>} %.<result>, 0
%.upper.<result> = extractvalue {<scalarType>, <scalarType>} %.<result>, 1

call <scalarType> (<scalarType>, <scalarType>)* @print_<scalarType>_interval(<scalarType> %.lower.<result>, <scalarType> %.upper.<result>)
;end print interval

>>

exponent(expr1, expr2, type, tmpNum1, tmpNum2, result) ::= <<
;start power
<expr1>
<expr2>
%.<result> = call <type> (<type>, <type>)* @power_<type>(<type> %.<tmpNum1>, <type> %.<tmpNum2>)
;end power


>>

input(varName, varType, scopeNum) ::= <<
;start input
call <varType> (<varType>*)* @input_<varType>(<varType>* %.<varName>.<scopeNum>)
;end input

>>

streamState(tmpNum) ::= <<
;start stream state
%.<tmpNum> = call i32 ()* @stream_state()
;end stream state

>>

returnStat(expr, tmpNum, type) ::= <<
;start return
<expr>
ret <type> %.<tmpNum>
;end return

>>

returnVoid() ::= "ret void"

//?
cast(func, expr) ::= <<
;start cast
<expr>
<func>
;end cast

>>

length(result, scalarType, expr, tmpNum) ::= <<
;start length
<expr>
%.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum>, 0
;end length

>>

callFunc(funcName, retType, exprs, varNames, varTypes, result) ::= <<
;start function call
<exprs>
%.<result> = call <retType> ( <varTypes:{ a |<a>}; separator=", "> )* @<funcName>(<varTypes, varNames:{ a, b |<a> %.<b>}; separator=", ">)
;end function call

>>

callProc(procName, retType, exprs, varNames, varTypes, result) ::= <<
;start procedure call
<exprs>
%.<result> = call <retType> ( <varTypes:{ a |<a>}; separator=", "> )* @<procName>(<varTypes, varNames:{ a, b |<a> %.<b>}; separator=", ">)
;end procedure call

>>

callVoidProc(funcName, exprs, varNames, varTypes, result) ::= <<
;call void proc
<exprs>
call void ( <varTypes:{ a |<a>}; separator=", "> )* @<procName>(<varTypes, varNames:{ a, b |<a> %.<b>}; separator=", ">)
;end call void proc

>>

negative(tmpNum, expr, zero, result, operator) ::= <<
;start negative
<expr>

%.<result> = <operator> <type> <zero>, %.<tmpNum>
;end negative

>>

not(expr, type, tmpNum, result) ::= <<
;start not
<expr>
%.<result> = xor i1 1, %.<tmpNum>
;end not  

>>

compare(expr1, expr2, comparison, operator, type, tmpNum1, tmpNum2, result) ::= <<
;start equals
<expr1>
<expr2>

%.bool<result> = <comparison> <operator> <type> %.<tmpNum1>, %.<tmpNum2>
%.<result> = select i1 %.bool<result>, i1 1, i1 0
;end equals

>>

arithmetic(expr1, expr2, operator, type, tmpNum1, tmpNum2, result, promote1, promote2) ::= <<
;start arithmetic
<expr1>
<expr2>
<promote1>
<promote2>
%.<result> = <operator> <type> %.<tmpNum1>, %.<tmpNum2>
;end arithmetic

>>

vec_arithmetic(expr1, expr2, operator, scalarType, resultType, tmpNum1, tmpNum2, result) ::= <<
;start vec arithmetic
<expr1>
<expr2>

%.size.1.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum1>, 0
%.vectortemp.1.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum1>, 1

%.size.2.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum2>, 0
%.vectortemp.2.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum2>, 1

%.vector.<result> = alloca <resultType>, i32 %.size.1.<result>, align 4

call <scalarType> (<scalarType>*, i32, <scalarType>*, i32, <resultType>*)* @<operator>_<scalarType>_vectors(<scalarType>* %.vectortemp.1.<result>, i32 %.size.1.<result>, <scalarType>* %.vectortemp.2.<result>, i32 %.size.2.<result>, <resultType>* %.vector.<result>)

%.temp.result.<result> = insertvalue {i32, <resultType>*} undef, i32 %.size.1.<result>, 0
%.<result> = insertvalue {i32, <resultType>*} %.temp.result.<result>, <resultType>* %.vector.<result>, 1
;end vec arithmetic

>>


vec_equality(expr1, expr2, operator, scalarType, tmpNum1, tmpNum2, result) ::= <<
;start vec equality
<expr1>
<expr2>

%.size.1.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum1>, 0
%.vectortemp.1.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum1>, 1

%.size.2.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum2>, 0
%.vectortemp.2.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum2>, 1

%.<result> = call i1 (<scalarType>*, i32, <scalarType>*, i32)* @<operator>_<scalarType>_vectors(<scalarType>* %.vectortemp.1.<result>, i32 %.size.1.<result>, <scalarType>* %.vectortemp.2.<result>, i32 %.size.2.<result>)
;end vec equality


>>

vec_unary(expr, operator, scalarType, tmpNum, result) ::= <<
;start vec unary
<expr>
%.size.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum>, 0
%.vectortemp.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum>, 1

%.vector.<result> = alloca <scalarType>, i32 %.size.<result>, align 4

call <scalarType> (<scalarType>*, i32, <scalarType>*)* @<operator>_<scalarType>_vectors(<scalarType>* %.vectortemp.<result>, i32 %.size.<result>, <scalarType>* %.vector.<result>)

%.temp.result.<result> = insertvalue {i32, <scalarType>*} undef, i32 %.size.<result>, 0
%.<result> = insertvalue {i32, <scalarType>*} %.temp.result.<result>, <scalarType>* %.vector.<result>, 1
;end vec unary

>>

vec_dot(expr1, expr2, operator, scalarType, tmpNum1, tmpNum2, result) ::= <<
;start vec dot
<expr1>
<expr2>

%.size.1.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum1>, 0
%.vectortemp.1.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum1>, 1

%.size.2.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum2>, 0
%.vectortemp.2.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum2>, 1

%.<result> = call <scalarType> (<scalarType>*, i32, <scalarType>*, i32)* @<operator>_<scalarType>_vectors(<scalarType>* %.vectortemp.1.<result>, i32 %.size.1.<result>, <scalarType>* %.vectortemp.2.<result>, i32 %.size.2.<result>)
;end vec dot

>>

vec_cat(expr1, expr2, operator, scalarType, tmpNum1, tmpNum2, result) ::= <<
;start vec cat
<expr1>
<expr2>

%.size.1.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum1>, 0
%.vectortemp.1.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum1>, 1

%.size.2.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum2>, 0
%.vectortemp.2.<result> = extractvalue {i32, <scalarType>*} %.<tmpNum2>, 1

%.catsize.<result> = add i32 %.size.1.<result>, %.size.2.<result>

%.vector.<result> = alloca <scalarType>, i32 %.catsize.<result>, align 4

call <scalarType> (<scalarType>*, i32, <scalarType>*, i32, <scalarType>*)* @<operator>_<scalarType>_vectors(<scalarType>* %.vectortemp.1.<result>, i32 %.size.1.<result>, <scalarType>* %.vectortemp.2.<result>, i32 %.size.2.<result>, <scalarType>* %.vector.<result>)

%.temp.result.<result> = insertvalue {i32, <scalarType>*} undef, i32 %.catsize.<result>, 0
%.<result> = insertvalue {i32, <scalarType>*} %.temp.result.<result>, <scalarType>* %.vector.<result>, 1
;end vec cat

>>

ifStatement(condition, body, tmpNum) ::= <<
;start if conditional
<condition>
%.notZero<tmpNum> = icmp ne i1 %.<tmpNum>, 0
br i1 %.notZero<tmpNum>, label %.body<tmpNum>, label %.skip<tmpNum>
.body<tmpNum>:
<body>
br label %.skip<tmpNum>
.skip<tmpNum>:
;end if conditional

>>

ifElseStatement(condition, body, elseBody, tmpNum) ::= <<
;start if else conditional
<condition>
%.notZero<tmpNum> = icmp ne i1 %.<tmpNum>, 0
br i1 %.notZero<tmpNum>, label %.body<tmpNum>, label %.elseBody<tmpNum>
.body<tmpNum>:
<body>
br label %.finished<tmpNum>
.elseBody<tmpNum>:
<elseBody>
br label %.finished<tmpNum>
.finished<tmpNum>:
;end if else conditional

>>


whileLoop(condition, body, tmpNum, loopNum) ::= <<
;start while loop
br label %.startloop<loopNum>
.startloop<loopNum>:
<condition>
%.notZero<tmpNum> = icmp ne i1 %.<tmpNum>, 0
br i1 %.notZero<tmpNum>, label %.body<loopNum>, label %.endloop<loopNum>
.body<loopNum>:
<body>
br label %.startloop<loopNum>
.endloop<loopNum>:
;end while loop

>>

doWhileLoop(condition, body, tmpNum, loopNum) ::= <<
;start do while loop
br label %.body<loopNum>
.body<loopNum>:
<body>
br label %.startloop<loopNum>
.startloop<loopNum>:
<condition>
%.notZero<tmpNum> = icmp ne i1 %.<tmpNum>, 0
br i1 %.notZero<tmpNum>, label %.body<loopNum>, label %.endloop<loopNum>
.endloop<loopNum>:
;end do while loop

>>

infLoop(body, tmpNum, loopNum) ::= <<
;start inf loop
br label %.startloop<loopNum>
.startloop<loopNum>:
<body>
br label %.startloop<loopNum>
.endloop<loopNum>:
;end inf loop

>>

break(loopNum) ::= <<
;start break
br label %.endloop<loopNum>
;end break

>>

continue(loopNum) ::= <<
;start continue
br label %.startloop<loopNum>
;end continue

>>