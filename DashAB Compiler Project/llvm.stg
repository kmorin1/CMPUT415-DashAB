group llvm;

return(a) ::= "<a>"

declare(var, expr, tmpNum) ::= <<
;evaluating expression
<expr>
;storing expression into variable
%.<var> = alloca i32, align 4
store i32 %.<tmpNum>, i32* %.<var>
>>

llvmProgram(procedures) ::= <<
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

<procedures>
>>

globalDeclare(varName, varType, varValue) ::= <<
  @.<varName> = global <varType> <varValue>, align 4
>>

declareProcedure(procName, procVars, procType, procBody, retType, retNum) ::= <<
define <retType> @<procName>(<procVars, procType:{ a, b | <b> %<a>}; seperator=", ">) {
entry:
  <procBody>
  ret <retType> %.<retNum>
}
>>

outputAssi(varName, varType, expr, tmpNum) ::= <<
;start outputAssi
<expr>

store <varType> %.<tmpNum>, <varType>* @.<varName>
;end outputAssi
>>

//??
load_num(tmpNum, value) ::= <<
;start load_num
%.temp<tmpNum> = alloca i32, align 4
store i32 <value>, i32* %.temp<tmpNum>
%.<tmpNum> = load i32* %.temp<tmpNum>
;end load_num

>>

load_var(tmpNum, var, varType) ::= <<
;start load_var
%.<tmpNum> = load <varType>* @.<var>
;end load_var

>>

print(expr, result) ::= <<

>>

//?
cast(varType, expr, castType) ::= <<
;start cast
resultthing = bitcast <varType> <expr> to <castType>
;end cast

>>

equals(expr1, expr2, tmpNum1, tmpNum2, result) ::= <<
;start equals
<expr1>
<expr2>

%.bool<result> = icmp eq  i32 %.<tmpNum1>, %.<tmpNum2>
%.<result> = select i1 %.bool<result>, i32 1, i32 0
;end equals
>>

nEquals(expr1, expr2, tmpNum1, tmpNum2, result) ::= <<
;start nequals
<expr1>
<expr2>

%.bool<result> = icmp ne  i32 %.<tmpNum1>, %.<tmpNum2>
%.<result> = select i1 %.bool<result>, i32 1, i32 0
;end nequals
>>

lessThan(expr1, expr2, tmpNum1, tmpNum2, result) ::= <<
;start less than
<expr1>
<expr2>

%.bool<result> = icmp slt  i32 %.<tmpNum1>, %.<tmpNum2>
%.<result> = select i1 %.bool<result>, i32 1, i32 0
;end less than
>>

lessThanE(expr1, expr2, tmpNum1, tmpNum2, result) ::= <<
;start less than or e
<expr1>
<expr2>

%.bool<result> = icmp sle  i32 %.<tmpNum1>, %.<tmpNum2>
%.<result> = select i1 %.bool<result>, i32 1, i32 0
;end less than or e
>>

greaterThan(expr1, expr2, tmpNum1, tmpNum2, result) ::= <<
;start greater than
<expr1>
<expr2>

%.bool<result> = icmp sgt  i32 %.<tmpNum1>, %.<tmpNum2>
%.<result> = select i1 %.bool<result>, i32 1, i32 0
;end greater than
>>

greaterThanE(expr1, expr2, tmpNum1, tmpNum2, result) ::= <<
;start greater than or e
<expr1>
<expr2>

%.bool<result> = icmp sge i32 %.<tmpNum1>, %.<tmpNum2>
%.<result> = select i1 %.bool<result>, i32 1, i32 0
;end greater than or e
>>

equalsFloat(expr1, expr2, tmpNum1, tmpNum2, result) ::= <<
;start equals
<expr1>
<expr2>

%.bool<result> = fcmp oeq float %.<tmpNum1>, %.<tmpNum2>
%.<result> = select i1 %.bool<result>, i32 1, i32 0
;end equals
>>

nEqualsFloat(expr1, expr2, tmpNum1, tmpNum2, result) ::= <<
;start nequals
<expr1>
<expr2>

%.bool<result> = fcmp one float %.<tmpNum1>, %.<tmpNum2>
%.<result> = select i1 %.bool<result>, i32 1, i32 0
;end nequals
>>

lessThanFloat(expr1, expr2, tmpNum1, tmpNum2, result) ::= <<
;start less than
<expr1>
<expr2>

%.bool<result> = fcmp olt float %.<tmpNum1>, %.<tmpNum2>
%.<result> = select i1 %.bool<result>, i32 1, i32 0
;end less than
>>

lessThanEFloat(expr1, expr2, tmpNum1, tmpNum2, result) ::= <<
;start less than or e
<expr1>
<expr2>

%.bool<result> = icmp ole float %.<tmpNum1>, %.<tmpNum2>
%.<result> = select i1 %.bool<result>, i32 1, i32 0
;end less than or e
>>

greaterThanFloat(expr1, expr2, tmpNum1, tmpNum2, result) ::= <<
;start greater than
<expr1>
<expr2>

%.bool<result> = icmp ogt float %.<tmpNum1>, %.<tmpNum2>
%.<result> = select i1 %.bool<result>, i32 1, i32 0
;end greater than
>>

greaterThanEFloat(expr1, expr2, tmpNum1, tmpNum2, result) ::= <<
;start greater than or e
<expr1>
<expr2>

%.bool<result> = icmp oge float %.<tmpNum1>, %.<tmpNum2>
%.<result> = select i1 %.bool<result>, i32 1, i32 0
;end greater than or e

add(expr1, expr2, tmpNum1, tmpNum2, result) ::= <<
;start add
<expr1>
<expr2>
%.<result> = add i32 %.<tmpNum1>, %.<tmpNum2>
;end add

>>

sub(expr1, expr2, tmpNum1, tmpNum2, result) ::= <<
;start add
<expr1>
<expr2>
%.<result> = sub i32 %.<tmpNum1>, %.<tmpNum2>
;end add

>>

mul(expr1, expr2, tmpNum1, tmpNum2, result) ::= <<
;start add
<expr1>
<expr2>
%.<result> = mul i32 %.<tmpNum1>, %.<tmpNum2>
;end add

>>

div(expr1, expr2, tmpNum1, tmpNum2, result) ::= <<
;start add
<expr1>
<expr2>
%.<result> = udiv i32 %.<tmpNum1>, %.<tmpNum2>
;end add

>>

ifStatement(condition, body, tmpNum) ::= <<
;start if conditional
<condition>
%.notZero<tmpNum> = icmp ne i32 %.<tmpNum>, 0
br i1 %.notZero<tmpNum>, label %.body<tmpNum>, label %.skip<tmpNum>
.body<tmpNum>:
<body>
br label %.skip<tmpNum>
.skip<tmpNum>:
;end if conditional

>>

loopStatement(condition, body, tmpNum) ::= <<
;start loop conditional
br label %.startloop<tmpNum>
.startloop<tmpNum>:
<condition>
%.notZero<tmpNum> = icmp ne i32 %.<tmpNum>, 0
br i1 %.notZero<tmpNum>, label %.body<tmpNum>, label %.endloop<tmpNum>
.body<tmpNum>:
<body>
br label %.startloop<tmpNum>
.endloop<tmpNum>:
;end loop conditional

>>